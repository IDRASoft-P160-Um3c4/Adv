package gob.sct.sipmm.dao;
import java.sql.*; import java.util.*; import com.micper.excepciones.*;
import com.micper.ingsw.*; import com.micper.seguridad.vo.*; import com.micper.sql.*;
import com.micper.util.TFechas;
/**
 * <p>Title: TDTRARegEtapasXModTram.java</p>
 * <p>Description: DAO de la entidad TRARegEtapasXModTram</p>
 * <p>Copyright: Copyright (c) 2005 </p>
 * <p>Company: Tecnología InRed S.A. de C.V. </p>
 * @author ocastrejon
 * @version 1.0
 */
public class TDTRARegEtapasXModTram extends DAOBase{
  private TParametro VParametros = new TParametro("11");
  private String dataSourceName = VParametros.getPropEspecifica("ConDBModulo");
  /**
   * Ejecuta cualquier query enviado en cWhere y regresa a las entidades encontradas.
   * @param cKey String    - Cadena de Campos que definen la llave de cada entidad encontrada.
   * @param cWhere String  - Cadena que contiene al query a ejecutar.
   * @throws DAOException  - Excepción de tipo DAO
   * @return Vector        - Arreglo que contiene a las entidades (VOs) encontrados por el query.
   */
  public Vector findByCustom(String cKey,String cWhere) throws DAOException{
    Vector vcRecords = new Vector();
    cError = "";
    try{
      String cSQL = cWhere;
      vcRecords = this.FindByGeneric(cKey,cSQL,dataSourceName);
    } catch(Exception e){
      cError = e.toString();
    } finally{
      if(!cError.equals(""))
        throw new DAOException(cError);
      return vcRecords;
    }
 }
  /**
   * Inserta el registro dado por la entidad vData.
   * <p><b> insert into TRARegEtapasXModTram(iEjercicio,iNumSolicitud,iCveTramite,iCveModalidad,iCveEtapa,iOrden,iCveOficina,iCveDepartamento,iCveUsuario,tsRegistro) values (?,?,?,?,?,?,?,?,?,?) </b></p>
   * <p><b> Campos Llave: iEjercicio,iNumSolicitud,iCveTramite,iCveModalidad,iCveEtapa,iOrden, </b></p>
   * @param vData TVDinRep      - VO Dinámico que contiene a la entidad a Insertar.
   * @param cnNested Connection - Conexión anidada que permite que el método se encuentre dentro de una transacción mayor.
   * @throws DAOException       - Excepción de tipo DAO
   * @return TVDinRep           - VO Dinámico que contiene a la entidad a Insertada, así como a la llave de esta entidad.
   */
  public TVDinRep insert(TVDinRep vData,Connection cnNested) throws
      DAOException{
    DbConnection dbConn = null;
    Connection conn = cnNested;
    PreparedStatement lPStmt = null;
    Vector vcOfiDepData = new Vector();
    boolean lSuccess = true;
    try{
      if(cnNested == null){
        dbConn = new DbConnection(dataSourceName);
        conn = dbConn.getConnection();
        conn.setAutoCommit(false);
        conn.setTransactionIsolation(2);
      }

      String cOficDep = "SELECT " +
          "ICVEOFICINA,ICVEDEPARTAMENTO " +
          "FROM TRAREGETAPASXMODTRAM " +
          "where IEJERCICIO = " + vData.getString("iEjercicio") +
          " and INUMSOLICITUD = " + vData.getString("iNumSolicitud") +
          " and icveetapa = " + VParametros.getPropEspecifica("EtapaRecepcion");

      vcOfiDepData = this.findByCustom("",cOficDep);

      if(vcOfiDepData.size() > 0){
         TVDinRep vOfiDep = (TVDinRep) vcOfiDepData.get(0);
         vData.put("iCveOficina",vOfiDep.getInt("iCveOficina"));
         vData.put("iCveDepartamento",vOfiDep.getInt("iCveDepartamento"));
      } else {
        vData.put("iCveOficina",0);
        vData.put("iCveDepartamento",0);
      }

      TVDinRep vCambiaEtapa = new TVDinRep();
      vCambiaEtapa.put("iEjercicio",vData.getInt("iEjercicio"));
      vCambiaEtapa.put("iNumSolicitud",vData.getInt("iNumSolicitud"));
      vCambiaEtapa.put("iCveTramite",vData.getInt("iCveTramite"));
      vCambiaEtapa.put("iCveModalidad",vData.getInt("iCveModalidad"));
      vCambiaEtapa.put("iCveEtapa",vData.getInt("iCveEtapa"));
      vCambiaEtapa.put("iCveOficina",vData.getInt("iCveOficina"));
      vCambiaEtapa.put("iCveDepartamento",vData.getInt("iCveDepartamento"));
      vCambiaEtapa.put("iCveUsuario",vData.getInt("iCveUsuario"));
      vCambiaEtapa.put("lAnexo",vData.getInt("lAnexo"));
      vCambiaEtapa.put("lResolucion",vData.getInt("lResolucion"));

      if(vData.getInt("iCveEtapa") == Integer.parseInt(VParametros.getPropEspecifica("EtapaConcluidoArea")))
        this.cambiarEtapa(vCambiaEtapa,true," ");
      else
        this.cambiarEtapa(vCambiaEtapa,false," ");

      if(vData.getInt("iCveEtapa") == Integer.parseInt(VParametros.getPropEspecifica("EtapaConcluidoArea"))){
        String cEnviaResolucion = "";
        String cSQLDirigidoA = "SELECT " +
                               "CENVIARRESOLUCIONA " +
                               "FROM TRAREGSOLICITUD " +
                               "where IEJERCICIO = " + vData.getString("iEjercicio") +
                               " and INUMSOLICITUD = " + vData.getString("iNumSolicitud");

        vcOfiDepData = this.findByCustom("",cSQLDirigidoA);

        if(vcOfiDepData.size() > 0){
          TVDinRep vDirigidoA = (TVDinRep) vcOfiDepData.get(0);
          cEnviaResolucion = vDirigidoA.getString("CENVIARRESOLUCIONA");
        }
        int iCveDeptoEntregarA;
        int iCveEtapa;

        if(!cEnviaResolucion.equalsIgnoreCase("") && !cEnviaResolucion.equalsIgnoreCase("null")
           && !cEnviaResolucion.equalsIgnoreCase(null)){
          iCveDeptoEntregarA = Integer.parseInt(VParametros.getPropEspecifica("DeptoOficialiaPartes"));
          iCveEtapa = Integer.parseInt(VParametros.getPropEspecifica("EtapaEntregarOficialia"));
        }else{
          iCveDeptoEntregarA = Integer.parseInt(VParametros.getPropEspecifica("DeptoVentanillaUnica"));
          iCveEtapa = Integer.parseInt(VParametros.getPropEspecifica("EtapaEntregarVU"));
        }

        TVDinRep vEtapaEntregarA = new TVDinRep();
        vEtapaEntregarA.put("iEjercicio",vData.getInt("iEjercicio"));
        vEtapaEntregarA.put("iNumSolicitud",vData.getInt("iNumSolicitud"));
        vEtapaEntregarA.put("iCveTramite",vData.getInt("iCveTramite"));
        vEtapaEntregarA.put("iCveModalidad",vData.getInt("iCveModalidad"));
        vEtapaEntregarA.put("iCveEtapa",iCveEtapa);
        vEtapaEntregarA.put("iCveOficina",vData.getInt("iCveOficina"));
        vEtapaEntregarA.put("iCveDepartamento",iCveDeptoEntregarA);
        vEtapaEntregarA.put("iCveUsuario",vData.getInt("iCveUsuario"));
        vEtapaEntregarA.put("lAnexo",vData.getInt("lAnexo"));
        this.cambiarEtapa(vEtapaEntregarA,false," ");
      }


      if(cnNested == null)
        conn.commit();

    } catch(Exception ex){
      warn("insert",ex);
      if(cnNested == null){
        try{
          conn.rollback();
        } catch(Exception e){
          fatal("insert.rollback",e);
        }
      }
      lSuccess = false;
    } finally{
      try{
        if(lPStmt != null){
          lPStmt.close();
        }
        if(cnNested == null){
          if(conn != null){
            conn.close();
          }
          dbConn.closeConnection();
        }
      } catch(Exception ex2){
        warn("insert.close",ex2);
      }
      if(lSuccess == false)
        throw new DAOException("");
      return vData;
    }
  }
  /**
   * Elimina al registro a través de la entidad dada por vData.
   * <p><b> delete from TRARegEtapasXModTram where iEjercicio = ? AND iNumSolicitud = ? AND iCveTramite = ? AND iCveModalidad = ? AND iCveEtapa = ? AND iOrden = ?  </b></p>
   * <p><b> Campos Llave: iEjercicio,iNumSolicitud,iCveTramite,iCveModalidad,iCveEtapa,iOrden, </b></p>
   * @param vData TVDinRep      - VO Dinámico que contiene a la entidad a Insertar.
   * @param cnNested Connection - Conexión anidada que permite que el método se encuentre dentro de una transacción mayor.
   * @throws DAOException       - Excepción de tipo DAO
   * @return boolean            - En caso de ser o no eliminado el registro.
   */
  public boolean delete(TVDinRep vData,Connection cnNested)throws
    DAOException{
    DbConnection dbConn = null;
    Connection conn = cnNested;
    PreparedStatement lPStmt = null;
    boolean lSuccess = true;
    String cMsg = "";
    try{
      if(cnNested == null){
        dbConn = new DbConnection(dataSourceName);
        conn = dbConn.getConnection();
        conn.setAutoCommit(false);
        conn.setTransactionIsolation(2);
      }

      //Ajustar Where de acuerdo a requerimientos...
      String lSQL = "delete from TRARegEtapasXModTram where iEjercicio = ? AND iNumSolicitud = ? AND iCveTramite = ? AND iCveModalidad = ? AND iCveEtapa = ? AND iOrden = ?  ";
      //...

      lPStmt = conn.prepareStatement(lSQL);

      lPStmt.setInt(1,vData.getInt("iEjercicio"));
      lPStmt.setInt(2,vData.getInt("iNumSolicitud"));
      lPStmt.setInt(3,vData.getInt("iCveTramite"));
      lPStmt.setInt(4,vData.getInt("iCveModalidad"));
      lPStmt.setInt(5,vData.getInt("iCveEtapa"));
      lPStmt.setInt(6,vData.getInt("iOrden"));

      lPStmt.executeUpdate();
      if(cnNested == null){
        conn.commit();
      }
    } catch(SQLException sqle){
      lSuccess = false;
      cMsg = ""+sqle.getErrorCode();
    } catch(Exception ex){
      warn("delete",ex);
      if(cnNested == null){
        try{
          conn.rollback();
        } catch(Exception e){
          fatal("delete.rollback",e);
        }
      }
      lSuccess = false;
    } finally{
      try{
        if(lPStmt != null){
          lPStmt.close();
        }
        if(cnNested == null){
          if(conn != null){
            conn.close();
          }
          dbConn.closeConnection();
        }
      } catch(Exception ex2){
        warn("delete.close",ex2);
      }
      if(lSuccess == false)
        throw new DAOException(cMsg);
      return lSuccess;
    }
  }
  /**
   * Actualiza al registro con las modificaciones enviadas sobre la entidad (vData).
   * <p><b> update TRARegEtapasXModTram set iCveOficina=?, iCveDepartamento=?, iCveUsuario=?, tsRegistro=? where iEjercicio = ? AND iNumSolicitud = ? AND iCveTramite = ? AND iCveModalidad = ? AND iCveEtapa = ? AND iOrden = ?  </b></p>
   * <p><b> Campos Llave: iEjercicio,iNumSolicitud,iCveTramite,iCveModalidad,iCveEtapa,iOrden, </b></p>
   * @param vData TVDinRep      - VO Dinámico que contiene a la entidad a Insertar.
   * @param cnNested Connection - Conexión anidada que permite que el método se encuentre dentro de una transacción mayor.
   * @throws DAOException       - Excepción de tipo DAO
   * @return TVDinRep           - Entidad Modificada.
   */
  public TVDinRep update(TVDinRep vData,Connection cnNested) throws
      DAOException{
    DbConnection dbConn = null;
    Connection conn = cnNested;
    PreparedStatement lPStmt = null;
    boolean lSuccess = true;
    try{
      if(cnNested == null){
        dbConn = new DbConnection(dataSourceName);
        conn = dbConn.getConnection();
        conn.setAutoCommit(false);
        conn.setTransactionIsolation(2);
      }
      String lSQL = "update TRARegEtapasXModTram set iCveOficina=?, iCveDepartamento=?, iCveUsuario=?, tsRegistro=? where iEjercicio = ? AND iNumSolicitud = ? AND iCveTramite = ? AND iCveModalidad = ? AND iCveEtapa = ? AND iOrden = ? ";

      vData.addPK(vData.getString("iEjercicio"));
      vData.addPK(vData.getString("iNumSolicitud"));
      vData.addPK(vData.getString("iCveTramite"));
      vData.addPK(vData.getString("iCveModalidad"));
      vData.addPK(vData.getString("iCveEtapa"));
      vData.addPK(vData.getString("iOrden"));

      lPStmt = conn.prepareStatement(lSQL);
      lPStmt.setInt(1,vData.getInt("iCveOficina"));
      lPStmt.setInt(2,vData.getInt("iCveDepartamento"));
      lPStmt.setInt(3,vData.getInt("iCveUsuario"));
      lPStmt.setString(4,vData.getString("tsRegistro"));
      lPStmt.setInt(5,vData.getInt("iEjercicio"));
      lPStmt.setInt(6,vData.getInt("iNumSolicitud"));
      lPStmt.setInt(7,vData.getInt("iCveTramite"));
      lPStmt.setInt(8,vData.getInt("iCveModalidad"));
      lPStmt.setInt(9,vData.getInt("iCveEtapa"));
      lPStmt.setInt(10,vData.getInt("iOrden"));
      lPStmt.executeUpdate();
      if(cnNested == null){
        conn.commit();
      }
    } catch(Exception ex){
      warn("update",ex);
      if(cnNested == null){
        try{
          conn.rollback();
        } catch(Exception e){
          fatal("update.rollback",e);
        }
      }
      lSuccess = false;
    } finally{
      try{
        if(lPStmt != null){
          lPStmt.close();
        }
        if(cnNested == null){
          if(conn != null){
            conn.close();
          }
          dbConn.closeConnection();
        }
      } catch(Exception ex2){
        warn("update.close",ex2);
      }
      if(lSuccess == false)
        throw new DAOException("");

      return vData;
    }
 }

 public TVDinRep insertEtapa(TVDinRep vData,Connection cnNested) throws
     DAOException{
   DbConnection dbConn = null;
   Connection conn = cnNested;
   PreparedStatement lPStmt = null;
   boolean lSuccess = true;
   try{
     if(cnNested == null){
       dbConn = new DbConnection(dataSourceName);
       conn = dbConn.getConnection();
       conn.setAutoCommit(false);
       conn.setTransactionIsolation(2);
     }

     String lSQL =
         " insert into TRARegEtapasXModTram( " +
         "             iEjercicio, " +
         "             iNumSolicitud, " +
         "             iCveTramite, " +
         "             iCveModalidad, " +
         "             iCveEtapa, " +
         "             iOrden, " +
         "             iCveOficina, " +
         "             iCveDepartamento, " +
         "             iCveUsuario, " +
         "             tsRegistro, " +
         "             lAnexo) " +
         " values (?,?,?,?,?,?,?,?,?,?,?)";

     //AGREGAR AL ULTIMO ...
     Vector vcData = findByCustom("",
                                  " select MAX(iOrden) AS iOrden " +
                                  "        from TRARegEtapasXModTram " +
                                  " where iEjercicio = " + vData.getInt("iEjercicio") +
                                  "   and iNumSolicitud = " + vData.getInt("iNumSolicitud") +
                                  "   and iCveTramite = " + vData.getInt("iCveTramite") +
                                  " and iCveModalidad = " + vData.getInt("iCveModalidad"));
     if(vcData.size() > 0){
        TVDinRep vUltimo = (TVDinRep) vcData.get(0);
        vData.put("iOrden",vUltimo.getInt("iOrden") + 1);
     }else
        vData.put("iOrden",1);

     vData.addPK(vData.getString("iEjercicio"));
     vData.addPK(vData.getString("iNumSolicitud"));
     vData.addPK(vData.getString("iCveTramite"));
     vData.addPK(vData.getString("iCveModalidad"));
     vData.addPK(vData.getString("iCveEtapa"));
     vData.addPK(vData.getString("iOrden"));

     lPStmt = conn.prepareStatement(lSQL);
     lPStmt.setInt(1,vData.getInt("iEjercicio"));
     lPStmt.setInt(2,vData.getInt("iNumSolicitud"));
     lPStmt.setInt(3,vData.getInt("iCveTramite"));
     lPStmt.setInt(4,vData.getInt("iCveModalidad"));
     lPStmt.setInt(5,vData.getInt("iCveEtapa"));
     lPStmt.setInt(6,vData.getInt("iOrden"));
     lPStmt.setInt(7,vData.getInt("iCveOficina"));
     lPStmt.setInt(8,vData.getInt("iCveDepartamento"));
     lPStmt.setInt(9,vData.getInt("iCveUsuario"));
     lPStmt.setString(10,vData.getString("tsRegistro"));
     lPStmt.setInt(11,vData.getInt("lAnexo"));

     lPStmt.executeUpdate();
     if(cnNested == null)
       conn.commit();

   } catch(SQLException se){
     se.printStackTrace();
     cMensaje = super.getSQLMessages(se);
     if(cnNested == null){
       try{
         conn.rollback();
       } catch(Exception e){
         fatal("insert.rollback",e);
       }
     }
     lSuccess = false;
   } catch(Exception ex){
     cMensaje = "";
     warn("insert",ex);
     if(cnNested == null){
       try{
         conn.rollback();
       } catch(Exception e){
         fatal("insert.rollback",e);
       }
     }
     lSuccess = false;
   } finally{
     try{
       if(lPStmt != null)
         lPStmt.close();
       if(cnNested == null){
         if(conn != null)
           conn.close();
         dbConn.closeConnection();
       }
     } catch(Exception ex2){
       warn("insert.close",ex2);
     }
     if(lSuccess == false)
       throw new DAOException(cMensaje);
     return vData;
   }
 }
 /**
  * Método que recibe un vector TVDinRep con los datos necesarios para cambiar de etapa un tramite, y un valor booleano para ver si
  * se actualiza la solicitud como resolución positiva.
  * <p><b> cambiarEtapa  </b></p>
  * El vector debe contener: iEjercicio,iNumSolicitud,iCveTramite,iCveModalidad,iCveEtapa,iCveOficina,iCveDepartamento,iCveUsuario,lAnexo,lResolucionPositiva
  * Autor: iCaballero
  * Fecha: 10 - Oct - 2006
  */

 public void cambiarEtapa(TVDinRep vData,boolean lResolucionPositiva, String cObservacion) throws
     DAOException{
   TFechas dFecha = new TFechas();
   boolean lSuccess = true;
   try{
     vData.put("tsRegistro",dFecha.getThisTime());
     this.insertEtapa(vData,null);
     if(lResolucionPositiva){
       TVDinRep vDataResPos = new TVDinRep();
       TDTRARegSolicitud dSolicitud = new TDTRARegSolicitud();
       vDataResPos.put("lResolucion",vData.getInt("lResolucion"));
       vDataResPos.put("iEjercicio",vData.getInt("iEjercicio"));
       vDataResPos.put("iNumSolicitud",vData.getInt("iNumSolicitud"));
       dSolicitud.updEtapas(vDataResPos,null);
     }
   } catch(Exception ex){
     cMensaje = ex.getMessage();
     lSuccess = false;
   }
   if(!lSuccess)
       throw new DAOException(cMensaje);
 }

}
